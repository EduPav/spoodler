{
	"info": {
		"_postman_id": "d065c7b8-d01b-4220-87a8-1102bee20166",
		"name": "Spoodler Test Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42370690"
	},
	"item": [
		{
			"name": "RESTful API",
			"item": [
				{
					"name": "endpoint w/o auth header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Missing Authorization header\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.eql([]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/getMe",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"getMe"
							]
						}
					},
					"response": []
				},
				{
					"name": "endpoint with wrong auth header format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Invalid Authorization header format\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.eql([]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "header",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wrong",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/getMe",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"getMe"
							]
						}
					},
					"response": []
				},
				{
					"name": "endpoint with invalid auth header token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.eql([]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "1234",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/getMe",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"getMe"
							]
						}
					},
					"response": []
				},
				{
					"name": "users/register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.eql(\r",
									"        {\r",
									"            \"email\":\"testuser@gmail.com\"\r",
									"        }\r",
									"    );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"testuser@gmail.com\",\r\n    \"password\":{{testUserPassword}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "users/register invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"email must be a valid email address: email='testuser.com'\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.eql([]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"testuser.com\",\r\n    \"password\":{{testUserPassword}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "users/register w/o email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Parameter 'email' is required.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.eql([]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\":1234\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "users/register w/o password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Parameter 'password' is required.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.eql([]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\":\"testuser@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "users/register email already in use",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Email already registered\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.eql([]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\" : \"testuser@gmail.com\",\r\n\"password\" : {{testUserPassword}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "users/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.email).to.eql(\"testuser@gmail.com\");\r",
									"    pm.expect(jsonData.data.token).is.not.be.empty;\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"jwtToken\", jsonData.data.token);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\" : \"testuser@gmail.com\",\r\n\"password\" : {{testUserPassword}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "users/login with unregistered email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Invalid email or password\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.eql([]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\" : \"unexistantUser@gmail.com\",\r\n\"password\" : 1234\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "users/login with wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Invalid email or password\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.eql([])\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\" : \"testuser@gmail.com\",\r\n\"password\" : 1234\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "users/getMe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.email).to.eql(\"testuser@gmail.com\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\" : \"testuser@gmail.com\",\r\n\"password\" : {{testUserPassword}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/getMe",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"getMe"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).to.eql(\r",
									"        {\r",
									"            \"id\": 1,\r",
									"            \"message\": \"Null pointer exception\",\r",
									"            \"file\": \"classes/Controller/UserController.php\",\r",
									"            \"description\": \"Occurs when trying to access a property of a null object.\",\r",
									"            \"created_at\": \"2023-08-01 10:00:00\"\r",
									"        }\r",
									"    );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\" : \"testuser@gmail.com\",\r\n\"password\" : {{testUserPassword}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/errors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"errors"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.eql(\r",
									"        {\r",
									"            \"id\": 1,\r",
									"            \"message\": \"Null pointer exception\",\r",
									"            \"file\": \"classes/Controller/UserController.php\",\r",
									"            \"description\": \"Occurs when trying to access a property of a null object.\",\r",
									"            \"created_at\": \"2023-08-01 10:00:00\"\r",
									"        }\r",
									"    );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\" : \"testuser@gmail.com\",\r\n\"password\" : {{testUserPassword}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/errors/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"errors",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "errors/:id invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"id must be an integer: id='1a'\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.eql([]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\" : \"testuser@gmail.com\",\r\n\"password\" : {{testUserPassword}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/errors/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"errors",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Page not found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.eql([]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/invalid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invalid"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid endpoint method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Method not allowed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.eql([]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "root",
			"item": [
				{
					"name": "report",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.eql(\r",
									"        {\r",
									"            \"id\": 1,\r",
									"            \"message\": \"Null pointer exception\",\r",
									"            \"file\": \"classes/Controller/UserController.php\",\r",
									"            \"description\": \"Occurs when trying to access a property of a null object.\",\r",
									"            \"created_at\": \"2023-08-01 10:00:00\"\r",
									"        } \r",
									"    );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/report.php?id=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"report.php"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "report with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"id must be an integer: id='a2'\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.eql([]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/report.php?id=a2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"report.php"
							],
							"query": [
								{
									"key": "id",
									"value": "a2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "report without id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Parameter 'id' is required.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.eql([]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/report.php",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"report.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "report as text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\r",
									"        \"3\\nUndefined index\\nclasses/Service/ErrorHandler.php\\nTriggered when accessing a non-existent array key.\\n2023-08-01 10:00:00\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/report.php?id=3&asText=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"report.php"
							],
							"query": [
								{
									"key": "id",
									"value": "3"
								},
								{
									"key": "asText",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "report as text without id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"Parameter 'id' is required.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/report.php?asText=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"report.php"
							],
							"query": [
								{
									"key": "id",
									"value": "3",
									"disabled": true
								},
								{
									"key": "asText",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "testUserPassword",
			"value": "\"testpassword\"",
			"type": "string"
		},
		{
			"key": "jwtToken",
			"value": "",
			"type": "string"
		}
	]
}